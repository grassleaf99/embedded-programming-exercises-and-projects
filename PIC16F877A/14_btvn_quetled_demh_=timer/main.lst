CCS PCM C Compiler, Version 5.025, 9105               07-Jul-19 21:16

               Filename:   C:\Users\ADMIN\Desktop\Hoc_PIC\14_btvn_quetled_demh_=timer\main.lst

               ROM used:   321 words (4%)
                           Largest free fragment is 2048
               RAM used:   28 (8%) at main() level
                           31 (8%) worst case
               Stack used: 2 locations (0 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0FD
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   032
001D:  BTFSS  0B.5
001E:  GOTO   021
001F:  BTFSC  0B.2
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   0DC
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   04D
.................... //!// timer duoc su dung trong dem gio 
.................... //!#include <main.h> 
.................... //!int8 maled7[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
.................... //!int phut = 0, giay = 0; 
.................... //!long count = 0; 
.................... //!void hienSoTangDan(int phut, int giay) 
.................... //!{ 
.................... //!         output_low(PIN_A4); 
.................... //!         output_high(PIN_E0); 
.................... //!         output_high(PIN_E1); 
.................... //!         output_high(PIN_E2); 
.................... //!         output_d(maled7[phut / 10]); 
.................... //!         delay_ms(5); 
.................... //!         output_low(PIN_E0); 
.................... //!         output_high(PIN_A4); 
.................... //!         output_high(PIN_E1); 
.................... //!         output_high(PIN_E2); 
.................... //!         output_d(maled7[phut % 10]); 
.................... //!         delay_ms(5); 
.................... //!         output_low(PIN_E1); 
.................... //!         output_high(PIN_E0); 
.................... //!         output_high(PIN_A4); 
.................... //!         output_high(PIN_E2); 
.................... //!         output_d(maled7[giay / 10]); 
.................... //!         delay_ms(5); 
.................... //!         output_low(PIN_E2); 
.................... //!         output_high(PIN_E0); 
.................... //!         output_high(PIN_E1); 
.................... //!         output_high(PIN_A4); 
.................... //!         output_d(maled7[giay % 10]); 
.................... //!         delay_ms(5); 
.................... //!} 
.................... //!void main() 
.................... //!{ 
.................... //!   set_tris_d(0x00); 
.................... //!   set_tris_e(0x00); 
.................... //!   set_tris_a(0x10); 
.................... //!   setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);    // chon clock noi = 20M/4 = 5MHz va che do chia cho 8 -> moi lan tang 1 bit se co tan so 5000kHz/8 = 8/5000 (ms) 
.................... //!   set_timer1(64911);                           // cai dat dem tu 64911 -> 65536 (2 mu 16) --> thoi gian xay ra tran timer1 (su kien ngat) la: (65536 - 64911) * (8/5000) = 1 ms   
.................... //!   enable_interrupts(INT_TIMER1);               // kich hoat ngat timer 1 
.................... //!   enable_interrupts(GLOBAL);                   // kich hoat ngat toan cuc 
.................... //!   while(TRUE) 
.................... //!   { 
.................... //!      hienSoTangDan(phut, giay); 
.................... //!      //TODO: User Code 
.................... //!   } 
.................... //! 
.................... //!} 
.................... //! 
.................... //!#INT_TIMER1 
.................... //!void chuyenled() 
.................... //!{ 
.................... //!     set_timer1(64911);                         // cai dat dem tu 64911 de xay ra tran sau 1 ms 
.................... //!     count++; 
.................... //!     if(count == 1000) 
.................... //!     { 
.................... //!         count = 0; 
.................... //!         giay++; 
.................... //!     } 
.................... //!     if(giay == 60) 
.................... //!     { 
.................... //!         giay = 0; 
.................... //!         phut++; 
.................... //!     } 
.................... //!     if(phut == 60) 
.................... //!     phut = 0; 
.................... //!} 
....................  
....................  
....................  
....................  
....................  
....................  
.................... //!#include <main.h> 
.................... //!int8 maled7[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
.................... //!int phut = 0, giay = 0; 
.................... //!long count = 0, dung = 0; 
.................... //! 
.................... //!#INT_TIMER0 
.................... //!void demdung() 
.................... //!{ 
.................... //!   set_timer0(158);  
.................... //!   dung++; 
.................... //!   if(dung == 5) 
.................... //!   dung = 1; 
.................... //!   switch(dung) 
.................... //!   { 
.................... //!         case 1:  output_low(PIN_A4); 
.................... //!                  output_high(PIN_E0); 
.................... //!                  output_high(PIN_E1); 
.................... //!                  output_high(PIN_E2); 
.................... //!                  output_d(maled7[phut / 10]); 
.................... //!                  break; 
.................... //!         case 2:  output_low(PIN_E0); 
.................... //!                  output_high(PIN_A4); 
.................... //!                  output_high(PIN_E1); 
.................... //!                  output_high(PIN_E2); 
.................... //!                  output_d(maled7[phut % 10]); 
.................... //!                  break; 
.................... //!         case 3:  output_low(PIN_E1); 
.................... //!                  output_high(PIN_E0); 
.................... //!                  output_high(PIN_A4); 
.................... //!                  output_high(PIN_E2); 
.................... //!                  output_d(maled7[giay / 10]); 
.................... //!                  break; 
.................... //!         case 4:  output_low(PIN_E2); 
.................... //!                  output_high(PIN_E0); 
.................... //!                  output_high(PIN_E1); 
.................... //!                  output_high(PIN_A4); 
.................... //!                  output_d(maled7[giay % 10]); 
.................... //!                  break; 
.................... //!   } 
.................... //!} 
.................... //! 
.................... //!void main() 
.................... //!{ 
.................... //!   set_tris_d(0x00); 
.................... //!   set_tris_e(0x00); 
.................... //!   set_tris_a(0x10); 
.................... //!   setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);    // chon clock noi = 20M/4 = 5MHz va che do chia cho 8 -> moi lan tang 1 bit se co tan so 5000kHz/8 = 8/5000 (ms) 
.................... //!   set_timer1(64911);                           // cai dat dem tu 64911 -> 65536 (2 mu 16) --> thoi gian xay ra tran timer1 (su kien ngat) la: (65536 - 64911) * (8/5000) = 1 ms   
.................... //!   enable_interrupts(INT_TIMER1);               // kich hoat ngat timer 1 
.................... //!   setup_timer_0(T0_INTERNAL | T0_DIV_256); 
.................... //!   set_timer0(158);                             // cai dat dem tu 206 de xay ra tran sau 2,56 ms 
.................... //!   enable_interrupts(INT_TIMER0);               // enable ngat tràn timer 0 
.................... //!   enable_interrupts(GLOBAL);                   // kich hoat ngat toan cuc 
.................... //!   while(TRUE) 
.................... //!   { 
.................... //!      //TODO: User Code 
.................... //!   } 
.................... //! 
.................... //!} 
.................... //! 
.................... //!#INT_TIMER1 
.................... //!void chuyenled() 
.................... //!{ 
.................... //!     set_timer1(64911);                         // cai dat dem tu 64911 de xay ra tran sau 1 ms 
.................... //!     count++; 
.................... //!     if(count == 1000) 
.................... //!     { 
.................... //!         count = 0; 
.................... //!         giay++; 
.................... //!     } 
.................... //!     if(giay == 60) 
.................... //!     { 
.................... //!         giay = 0; 
.................... //!         phut++; 
.................... //!     } 
.................... //!     if(phut == 60) 
.................... //!     phut = 0; 
.................... //!} 
.................... //! 
....................  
....................  
....................  
....................  
....................  
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0038:  MOVF   38,W
0039:  CLRF   78
003A:  SUBWF  37,W
003B:  BTFSC  03.0
003C:  GOTO   040
003D:  MOVF   37,W
003E:  MOVWF  77
003F:  GOTO   04C
0040:  CLRF   77
0041:  MOVLW  08
0042:  MOVWF  39
0043:  RLF    37,F
0044:  RLF    77,F
0045:  MOVF   38,W
0046:  SUBWF  77,W
0047:  BTFSC  03.0
0048:  MOVWF  77
0049:  RLF    78,F
004A:  DECFSZ 39,F
004B:  GOTO   043
004C:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
....................  
....................  
.................... int8 maled7[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
*
010E:  MOVLW  C0
010F:  BCF    03.5
0110:  MOVWF  27
0111:  MOVLW  F9
0112:  MOVWF  28
0113:  MOVLW  A4
0114:  MOVWF  29
0115:  MOVLW  B0
0116:  MOVWF  2A
0117:  MOVLW  99
0118:  MOVWF  2B
0119:  MOVLW  92
011A:  MOVWF  2C
011B:  MOVLW  82
011C:  MOVWF  2D
011D:  MOVLW  F8
011E:  MOVWF  2E
011F:  MOVLW  80
0120:  MOVWF  2F
0121:  MOVLW  90
0122:  MOVWF  30
.................... int phut = 0, giay = 0; 
.................... long count = 0, dung = 0; 
....................  
.................... #INT_TIMER0 
.................... void demdung() 
.................... { 
....................    output_high(PIN_A4); 
*
004D:  BSF    03.5
004E:  BCF    05.4
004F:  BCF    03.5
0050:  BSF    05.4
....................    output_high(PIN_E0); 
0051:  BSF    03.5
0052:  BCF    09.0
0053:  BCF    03.5
0054:  BSF    09.0
....................    output_high(PIN_E1); 
0055:  BSF    03.5
0056:  BCF    09.1
0057:  BCF    03.5
0058:  BSF    09.1
....................    output_high(PIN_E2); 
0059:  BSF    03.5
005A:  BCF    09.2
005B:  BCF    03.5
005C:  BSF    09.2
....................    set_timer0(158);  
005D:  MOVLW  9E
005E:  MOVWF  01
....................    dung++; 
005F:  INCF   35,F
0060:  BTFSC  03.2
0061:  INCF   36,F
....................    switch(dung) 
0062:  MOVF   35,W
0063:  MOVWF  77
0064:  MOVF   36,W
0065:  MOVWF  7A
0066:  MOVF   7A,W
0067:  BTFSS  03.2
0068:  GOTO   06D
0069:  MOVLW  01
006A:  SUBWF  77,W
006B:  BTFSC  03.2
006C:  GOTO   083
006D:  MOVF   7A,W
006E:  BTFSS  03.2
006F:  GOTO   074
0070:  MOVLW  02
0071:  SUBWF  77,W
0072:  BTFSC  03.2
0073:  GOTO   098
0074:  MOVF   7A,W
0075:  BTFSS  03.2
0076:  GOTO   07B
0077:  MOVLW  03
0078:  SUBWF  77,W
0079:  BTFSC  03.2
007A:  GOTO   0AD
007B:  MOVF   7A,W
007C:  BTFSS  03.2
007D:  GOTO   082
007E:  MOVLW  04
007F:  SUBWF  77,W
0080:  BTFSC  03.2
0081:  GOTO   0C2
0082:  GOTO   0D8
....................    { 
....................          case 1:  output_low(PIN_A4); 
0083:  BSF    03.5
0084:  BCF    05.4
0085:  BCF    03.5
0086:  BCF    05.4
....................                   output_d(maled7[phut / 10]); 
0087:  MOVF   31,W
0088:  MOVWF  37
0089:  MOVLW  0A
008A:  MOVWF  38
008B:  CALL   038
008C:  MOVLW  27
008D:  ADDWF  78,W
008E:  MOVWF  04
008F:  BCF    03.7
0090:  MOVF   00,W
0091:  MOVWF  37
0092:  BSF    03.5
0093:  CLRF   08
0094:  BCF    03.5
0095:  MOVF   37,W
0096:  MOVWF  08
....................                   break; 
0097:  GOTO   0D8
....................          case 2:  output_low(PIN_E0); 
0098:  BSF    03.5
0099:  BCF    09.0
009A:  BCF    03.5
009B:  BCF    09.0
....................                   output_d(maled7[phut % 10]); 
009C:  MOVF   31,W
009D:  MOVWF  37
009E:  MOVLW  0A
009F:  MOVWF  38
00A0:  CALL   038
00A1:  MOVLW  27
00A2:  ADDWF  77,W
00A3:  MOVWF  04
00A4:  BCF    03.7
00A5:  MOVF   00,W
00A6:  MOVWF  37
00A7:  BSF    03.5
00A8:  CLRF   08
00A9:  BCF    03.5
00AA:  MOVF   37,W
00AB:  MOVWF  08
....................                   break; 
00AC:  GOTO   0D8
....................          case 3:  output_low(PIN_E1); 
00AD:  BSF    03.5
00AE:  BCF    09.1
00AF:  BCF    03.5
00B0:  BCF    09.1
....................                   output_d(maled7[giay / 10]); 
00B1:  MOVF   32,W
00B2:  MOVWF  37
00B3:  MOVLW  0A
00B4:  MOVWF  38
00B5:  CALL   038
00B6:  MOVLW  27
00B7:  ADDWF  78,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  MOVWF  37
00BC:  BSF    03.5
00BD:  CLRF   08
00BE:  BCF    03.5
00BF:  MOVF   37,W
00C0:  MOVWF  08
....................                   break; 
00C1:  GOTO   0D8
....................          case 4:  output_low(PIN_E2); 
00C2:  BSF    03.5
00C3:  BCF    09.2
00C4:  BCF    03.5
00C5:  BCF    09.2
....................                   output_d(maled7[giay % 10]); 
00C6:  MOVF   32,W
00C7:  MOVWF  37
00C8:  MOVLW  0A
00C9:  MOVWF  38
00CA:  CALL   038
00CB:  MOVLW  27
00CC:  ADDWF  77,W
00CD:  MOVWF  04
00CE:  BCF    03.7
00CF:  MOVF   00,W
00D0:  MOVWF  37
00D1:  BSF    03.5
00D2:  CLRF   08
00D3:  BCF    03.5
00D4:  MOVF   37,W
00D5:  MOVWF  08
....................                   dung = 0; 
00D6:  CLRF   36
00D7:  CLRF   35
....................                   break; 
....................    } 
00D8:  BCF    0B.2
00D9:  BCF    0A.3
00DA:  BCF    0A.4
00DB:  GOTO   021
.................... } 
....................  
.................... void main() 
*
00FD:  MOVF   03,W
00FE:  ANDLW  1F
00FF:  MOVWF  03
0100:  CLRF   31
0101:  CLRF   32
0102:  CLRF   34
0103:  CLRF   33
0104:  CLRF   36
0105:  CLRF   35
0106:  BSF    03.5
0107:  BSF    1F.0
0108:  BSF    1F.1
0109:  BSF    1F.2
010A:  BCF    1F.3
010B:  MOVLW  07
010C:  MOVWF  1C
010D:  BCF    03.7
.................... { 
....................    set_tris_d(0x00); 
*
0123:  MOVLW  00
0124:  BSF    03.5
0125:  MOVWF  08
....................    set_tris_e(0x00); 
0126:  BCF    09.0
0127:  BCF    09.1
0128:  BCF    09.2
....................    set_tris_a(0x10); 
0129:  MOVLW  10
012A:  MOVWF  05
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);    // chon clock noi = 20M/4 = 5MHz va che do chia cho 8 -> moi lan tang 1 bit se co tan so 5000kHz/8 = 8/5000 (ms) 
012B:  MOVLW  B5
012C:  BCF    03.5
012D:  MOVWF  10
....................    set_timer1(64911);                           // cai dat dem tu 64911 -> 65536 (2 mu 16) --> thoi gian xay ra tran timer1 (su kien ngat) la: (65536 - 64911) * (8/5000) = 1 ms   
012E:  CLRF   0E
012F:  MOVLW  FD
0130:  MOVWF  0F
0131:  MOVLW  8F
0132:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1);               // kich hoat ngat timer 1 
0133:  BSF    03.5
0134:  BSF    0C.0
....................    setup_timer_0(T0_INTERNAL | T0_DIV_256); 
0135:  MOVF   01,W
0136:  ANDLW  C0
0137:  IORLW  07
0138:  MOVWF  01
....................    set_timer0(158);                             // cai dat dem tu 206 de xay ra tran sau 2,56 ms 
0139:  MOVLW  9E
013A:  BCF    03.5
013B:  MOVWF  01
....................    enable_interrupts(INT_TIMER0);               // enable ngat tràn timer 0 
013C:  BSF    0B.5
....................    enable_interrupts(GLOBAL);                   // kich hoat ngat toan cuc 
013D:  MOVLW  C0
013E:  IORWF  0B,F
....................    while(TRUE) 
....................    { 
013F:  GOTO   13F
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
....................  
.................... #INT_TIMER1 
.................... void chuyenled() 
0140:  SLEEP
.................... { 
....................      set_timer1(64911);                         // cai dat dem tu 64911 de xay ra tran sau 1 ms 
*
00DC:  CLRF   0E
00DD:  MOVLW  FD
00DE:  MOVWF  0F
00DF:  MOVLW  8F
00E0:  MOVWF  0E
....................      count++; 
00E1:  INCF   33,F
00E2:  BTFSC  03.2
00E3:  INCF   34,F
....................      if(count == 1000) 
00E4:  MOVF   33,W
00E5:  SUBLW  E8
00E6:  BTFSS  03.2
00E7:  GOTO   0EF
00E8:  MOVF   34,W
00E9:  SUBLW  03
00EA:  BTFSS  03.2
00EB:  GOTO   0EF
....................      { 
....................          count = 0; 
00EC:  CLRF   34
00ED:  CLRF   33
....................          giay++; 
00EE:  INCF   32,F
....................      } 
....................      if(giay == 60) 
00EF:  MOVF   32,W
00F0:  SUBLW  3C
00F1:  BTFSS  03.2
00F2:  GOTO   0F5
....................      { 
....................          giay = 0; 
00F3:  CLRF   32
....................          phut++; 
00F4:  INCF   31,F
....................      } 
....................      if(phut == 60) 
00F5:  MOVF   31,W
00F6:  SUBLW  3C
00F7:  BTFSC  03.2
....................      phut = 0; 
00F8:  CLRF   31
00F9:  BCF    0C.0
00FA:  BCF    0A.3
00FB:  BCF    0A.4
00FC:  GOTO   021
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

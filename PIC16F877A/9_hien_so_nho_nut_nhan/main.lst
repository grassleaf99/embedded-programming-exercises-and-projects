CCS PCM C Compiler, Version 5.025, 9105               27-May-19 17:34

               Filename:   C:\Users\ADMIN\Desktop\Hoc_PIC\hien_so_nho_nut_nhan\main.lst

               ROM used:   423 words (5%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           27 (7%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   134
0003:  NOP
.................... // code nay chac chan se sai neu giu nut nhan 
.................... // neu giu nut nhan thi chi co led gan vao chan E2 sang do ta quet led bang ham delay 
.................... // cu the la khi giu nut nhan, chuong trinh se cu o vong while(input == 0) va vi the, ham hien so ko dc goi lai, chi led dc cap nguon cuoi cung (led noi nguon toi chan E2) tu ham hien so duoc goi lan truoc hien so thoi  
.................... // -> de khac phuc su co nay can dung timer 
.................... // -> dung timer hieu qua toi uu hon so voi delay 
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0018:  MOVF   31,W
0019:  XORWF  33,W
001A:  ANDLW  80
001B:  MOVWF  35
001C:  BTFSS  31.7
001D:  GOTO   023
001E:  COMF   30,F
001F:  COMF   31,F
0020:  INCF   30,F
0021:  BTFSC  03.2
0022:  INCF   31,F
0023:  BTFSS  33.7
0024:  GOTO   02A
0025:  COMF   32,F
0026:  COMF   33,F
0027:  INCF   32,F
0028:  BTFSC  03.2
0029:  INCF   33,F
002A:  CLRF   78
002B:  CLRF   79
002C:  CLRF   77
002D:  CLRF   7A
002E:  MOVF   33,W
002F:  BTFSS  03.2
0030:  GOTO   034
0031:  MOVF   32,W
0032:  BTFSC  03.2
0033:  GOTO   04E
0034:  MOVLW  10
0035:  MOVWF  34
0036:  BCF    03.0
0037:  RLF    30,F
0038:  RLF    31,F
0039:  RLF    77,F
003A:  RLF    7A,F
003B:  MOVF   33,W
003C:  SUBWF  7A,W
003D:  BTFSS  03.2
003E:  GOTO   041
003F:  MOVF   32,W
0040:  SUBWF  77,W
0041:  BTFSS  03.0
0042:  GOTO   04A
0043:  MOVF   32,W
0044:  SUBWF  77,F
0045:  BTFSS  03.0
0046:  DECF   7A,F
0047:  MOVF   33,W
0048:  SUBWF  7A,F
0049:  BSF    03.0
004A:  RLF    78,F
004B:  RLF    79,F
004C:  DECFSZ 34,F
004D:  GOTO   036
004E:  BTFSS  35.7
004F:  GOTO   055
0050:  COMF   78,F
0051:  COMF   79,F
0052:  INCF   78,F
0053:  BTFSC  03.2
0054:  INCF   79,F
0055:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0004:  MOVLW  2E
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
.................... signed long g_x = 0; 
.................... void hienSoTangDan(signed long sotang); 
.................... int8 maled7[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
*
0141:  MOVLW  C0
0142:  BCF    03.5
0143:  MOVWF  22
0144:  MOVLW  F9
0145:  MOVWF  23
0146:  MOVLW  A4
0147:  MOVWF  24
0148:  MOVLW  B0
0149:  MOVWF  25
014A:  MOVLW  99
014B:  MOVWF  26
014C:  MOVLW  92
014D:  MOVWF  27
014E:  MOVLW  82
014F:  MOVWF  28
0150:  MOVLW  F8
0151:  MOVWF  29
0152:  MOVLW  80
0153:  MOVWF  2A
0154:  MOVLW  90
0155:  MOVWF  2B
.................... void main() 
*
0134:  MOVF   03,W
0135:  ANDLW  1F
0136:  MOVWF  03
0137:  CLRF   21
0138:  CLRF   20
0139:  BSF    03.5
013A:  BSF    1F.0
013B:  BSF    1F.1
013C:  BSF    1F.2
013D:  BCF    1F.3
013E:  MOVLW  07
013F:  MOVWF  1C
0140:  BCF    03.7
.................... { 
....................    set_tris_a(0xEF); // dat chan A4 làm output de cap nguon cho led 7 doan 
*
0156:  MOVLW  EF
0157:  BSF    03.5
0158:  MOVWF  05
....................    set_tris_e(0xF8); // dat chan E0, E1, E2 làm output de cap nguon cho led 7 doan 
0159:  BCF    09.0
015A:  BCF    09.1
015B:  BCF    09.2
....................    set_tris_d(0x00); // dat tat ca cac chan cong D la output de lam sang den led 7 doan 
015C:  MOVLW  00
015D:  MOVWF  08
....................    set_tris_b(0x03); // dat chan B0, B1 la input de dieu khien 2 nut nhan 
015E:  MOVLW  03
015F:  MOVWF  06
....................    while(TRUE) 
....................    { 
....................       if(input(PIN_B0) == 0)  // neu nhan nut dc noi vao chan B0 thi tang g_x 
0160:  BSF    06.0
0161:  BCF    03.5
0162:  BTFSC  06.0
0163:  GOTO   183
....................       { 
....................          delay_ms(2); 
0164:  MOVLW  02
0165:  MOVWF  2E
0166:  CALL   004
....................          if(input(PIN_B0) == 0) 
0167:  BSF    03.5
0168:  BSF    06.0
0169:  BCF    03.5
016A:  BTFSC  06.0
016B:  GOTO   174
....................          { 
....................             while(input(PIN_B0) == 0) {} 
016C:  BSF    03.5
016D:  BSF    06.0
016E:  BCF    03.5
016F:  BTFSS  06.0
0170:  GOTO   16C
....................             g_x++; 
0171:  INCF   20,F
0172:  BTFSC  03.2
0173:  INCF   21,F
....................          }    
....................          if(g_x > 9999) 
0174:  BTFSC  21.7
0175:  GOTO   183
0176:  MOVF   21,W
0177:  SUBLW  26
0178:  BTFSC  03.0
0179:  GOTO   183
017A:  XORLW  FF
017B:  BTFSS  03.2
017C:  GOTO   181
017D:  MOVF   20,W
017E:  SUBLW  0F
017F:  BTFSC  03.0
0180:  GOTO   183
....................          g_x = 0; 
0181:  CLRF   21
0182:  CLRF   20
....................       } 
....................       if(input(PIN_B1) == 0)  // neu nhan nut dc noi vao chan B1 thi giam g_x 
0183:  BSF    03.5
0184:  BSF    06.1
0185:  BCF    03.5
0186:  BTFSC  06.1
0187:  GOTO   19F
....................       { 
....................          delay_ms(2); 
0188:  MOVLW  02
0189:  MOVWF  2E
018A:  CALL   004
....................          if(input(PIN_B1) == 0) 
018B:  BSF    03.5
018C:  BSF    06.1
018D:  BCF    03.5
018E:  BTFSC  06.1
018F:  GOTO   199
....................          { 
....................             while(input(PIN_B1) == 0) {} 
0190:  BSF    03.5
0191:  BSF    06.1
0192:  BCF    03.5
0193:  BTFSS  06.1
0194:  GOTO   190
....................             g_x--; 
0195:  MOVF   20,W
0196:  BTFSC  03.2
0197:  DECF   21,F
0198:  DECF   20,F
....................          }    
....................          if(g_x < 0) 
0199:  BTFSS  21.7
019A:  GOTO   19F
....................          g_x = 9999; 
019B:  MOVLW  27
019C:  MOVWF  21
019D:  MOVLW  0F
019E:  MOVWF  20
....................       } 
....................       hienSoTangDan(g_x); 
019F:  MOVF   21,W
01A0:  MOVWF  2D
01A1:  MOVF   20,W
01A2:  MOVWF  2C
01A3:  GOTO   056
01A4:  BSF    03.5
01A5:  GOTO   160
....................       //TODO: User Code 
....................    } 
.................... } 
.................... void hienSoTangDan(signed long sotang) 
01A6:  SLEEP
.................... {   
....................          output_low(PIN_A4); 
*
0056:  BSF    03.5
0057:  BCF    05.4
0058:  BCF    03.5
0059:  BCF    05.4
....................          output_high(PIN_E0); 
005A:  BSF    03.5
005B:  BCF    09.0
005C:  BCF    03.5
005D:  BSF    09.0
....................          output_high(PIN_E1); 
005E:  BSF    03.5
005F:  BCF    09.1
0060:  BCF    03.5
0061:  BSF    09.1
....................          output_high(PIN_E2); 
0062:  BSF    03.5
0063:  BCF    09.2
0064:  BCF    03.5
0065:  BSF    09.2
....................          output_d(maled7[sotang / 1000]); 
0066:  MOVF   2D,W
0067:  MOVWF  31
0068:  MOVF   2C,W
0069:  MOVWF  30
006A:  MOVLW  03
006B:  MOVWF  33
006C:  MOVLW  E8
006D:  MOVWF  32
006E:  CALL   018
006F:  MOVLW  22
0070:  ADDWF  78,W
0071:  MOVWF  04
0072:  BCF    03.7
0073:  BTFSC  79.0
0074:  BSF    03.7
0075:  MOVF   00,W
0076:  MOVWF  30
0077:  BSF    03.5
0078:  CLRF   08
0079:  BCF    03.5
007A:  MOVF   30,W
007B:  MOVWF  08
....................          delay_ms(5); 
007C:  MOVLW  05
007D:  MOVWF  2E
007E:  CALL   004
....................          output_low(PIN_E0); 
007F:  BSF    03.5
0080:  BCF    09.0
0081:  BCF    03.5
0082:  BCF    09.0
....................          output_high(PIN_A4); 
0083:  BSF    03.5
0084:  BCF    05.4
0085:  BCF    03.5
0086:  BSF    05.4
....................          output_high(PIN_E1); 
0087:  BSF    03.5
0088:  BCF    09.1
0089:  BCF    03.5
008A:  BSF    09.1
....................          output_high(PIN_E2); 
008B:  BSF    03.5
008C:  BCF    09.2
008D:  BCF    03.5
008E:  BSF    09.2
....................          output_d(maled7[(sotang % 1000) / 100]); 
008F:  MOVF   2D,W
0090:  MOVWF  31
0091:  MOVF   2C,W
0092:  MOVWF  30
0093:  MOVLW  03
0094:  MOVWF  33
0095:  MOVLW  E8
0096:  MOVWF  32
0097:  CALL   018
0098:  MOVF   77,W
0099:  MOVWF  2E
009A:  MOVF   7A,W
009B:  MOVWF  2F
009C:  MOVWF  31
009D:  MOVF   77,W
009E:  MOVWF  30
009F:  CLRF   33
00A0:  MOVLW  64
00A1:  MOVWF  32
00A2:  CALL   018
00A3:  MOVLW  22
00A4:  ADDWF  78,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  BTFSC  79.0
00A8:  BSF    03.7
00A9:  MOVF   00,W
00AA:  MOVWF  30
00AB:  BSF    03.5
00AC:  CLRF   08
00AD:  BCF    03.5
00AE:  MOVF   30,W
00AF:  MOVWF  08
....................          delay_ms(5); 
00B0:  MOVLW  05
00B1:  MOVWF  2E
00B2:  CALL   004
....................          output_low(PIN_E1); 
00B3:  BSF    03.5
00B4:  BCF    09.1
00B5:  BCF    03.5
00B6:  BCF    09.1
....................          output_high(PIN_E0); 
00B7:  BSF    03.5
00B8:  BCF    09.0
00B9:  BCF    03.5
00BA:  BSF    09.0
....................          output_high(PIN_A4); 
00BB:  BSF    03.5
00BC:  BCF    05.4
00BD:  BCF    03.5
00BE:  BSF    05.4
....................          output_high(PIN_E2); 
00BF:  BSF    03.5
00C0:  BCF    09.2
00C1:  BCF    03.5
00C2:  BSF    09.2
....................          output_d(maled7[((sotang % 1000) % 100) / 10]); 
00C3:  MOVF   2D,W
00C4:  MOVWF  31
00C5:  MOVF   2C,W
00C6:  MOVWF  30
00C7:  MOVLW  03
00C8:  MOVWF  33
00C9:  MOVLW  E8
00CA:  MOVWF  32
00CB:  CALL   018
00CC:  MOVF   77,W
00CD:  MOVWF  2E
00CE:  MOVF   7A,W
00CF:  MOVWF  2F
00D0:  MOVWF  31
00D1:  MOVF   77,W
00D2:  MOVWF  30
00D3:  CLRF   33
00D4:  MOVLW  64
00D5:  MOVWF  32
00D6:  CALL   018
00D7:  MOVF   77,W
00D8:  MOVWF  2E
00D9:  MOVF   7A,W
00DA:  MOVWF  2F
00DB:  MOVWF  31
00DC:  MOVF   77,W
00DD:  MOVWF  30
00DE:  CLRF   33
00DF:  MOVLW  0A
00E0:  MOVWF  32
00E1:  CALL   018
00E2:  MOVLW  22
00E3:  ADDWF  78,W
00E4:  MOVWF  04
00E5:  BCF    03.7
00E6:  BTFSC  79.0
00E7:  BSF    03.7
00E8:  MOVF   00,W
00E9:  MOVWF  30
00EA:  BSF    03.5
00EB:  CLRF   08
00EC:  BCF    03.5
00ED:  MOVF   30,W
00EE:  MOVWF  08
....................          delay_ms(5); 
00EF:  MOVLW  05
00F0:  MOVWF  2E
00F1:  CALL   004
....................          output_low(PIN_E2); 
00F2:  BSF    03.5
00F3:  BCF    09.2
00F4:  BCF    03.5
00F5:  BCF    09.2
....................          output_high(PIN_E0); 
00F6:  BSF    03.5
00F7:  BCF    09.0
00F8:  BCF    03.5
00F9:  BSF    09.0
....................          output_high(PIN_E1); 
00FA:  BSF    03.5
00FB:  BCF    09.1
00FC:  BCF    03.5
00FD:  BSF    09.1
....................          output_high(PIN_A4); 
00FE:  BSF    03.5
00FF:  BCF    05.4
0100:  BCF    03.5
0101:  BSF    05.4
....................          output_d(maled7[((sotang % 1000) % 100) % 10]); 
0102:  MOVF   2D,W
0103:  MOVWF  31
0104:  MOVF   2C,W
0105:  MOVWF  30
0106:  MOVLW  03
0107:  MOVWF  33
0108:  MOVLW  E8
0109:  MOVWF  32
010A:  CALL   018
010B:  MOVF   77,W
010C:  MOVWF  2E
010D:  MOVF   7A,W
010E:  MOVWF  2F
010F:  MOVWF  31
0110:  MOVF   77,W
0111:  MOVWF  30
0112:  CLRF   33
0113:  MOVLW  64
0114:  MOVWF  32
0115:  CALL   018
0116:  MOVF   77,W
0117:  MOVWF  2E
0118:  MOVF   7A,W
0119:  MOVWF  2F
011A:  MOVWF  31
011B:  MOVF   77,W
011C:  MOVWF  30
011D:  CLRF   33
011E:  MOVLW  0A
011F:  MOVWF  32
0120:  CALL   018
0121:  MOVLW  22
0122:  ADDWF  77,W
0123:  MOVWF  04
0124:  BCF    03.7
0125:  BTFSC  7A.0
0126:  BSF    03.7
0127:  MOVF   00,W
0128:  MOVWF  30
0129:  BSF    03.5
012A:  CLRF   08
012B:  BCF    03.5
012C:  MOVF   30,W
012D:  MOVWF  08
....................          delay_ms(5); 
012E:  MOVLW  05
012F:  MOVWF  2E
0130:  CALL   004
0131:  BCF    0A.3
0132:  BCF    0A.4
0133:  GOTO   1A4 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

CCS PCM C Compiler, Version 5.025, 9105               18-Jul-19 22:41

               Filename:   C:\Users\ADMIN\Desktop\Hoc_PIC\1_bai1_Blink_led\main.lst

               ROM used:   86 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  BSF    03.5
001C:  BSF    1F.0
001D:  BSF    1F.1
001E:  BSF    1F.2
001F:  BCF    1F.3
0020:  MOVLW  07
0021:  MOVWF  1C
0022:  BCF    03.7
.................... { 
....................    set_tris_d(0x00); // cài dat port D làm output vì doi so truyên vào là 0x00000000 mà 0 cua tris có nghia là out tuc xuat du liêu -> tât ca các chan (bit) cua cong D deu là xuat du lieu  
0023:  MOVLW  00
0024:  MOVWF  08
....................    while(TRUE) 
....................    { 
....................       output_d(0xFE); // den led tuong ung voi bit D0 (chan  RD0) sang 
0025:  CLRF   08
0026:  MOVLW  FE
0027:  BCF    03.5
0028:  MOVWF  08
....................       delay_ms(1000);    // tam dung chuong trinh 1000 ms = 1s (tham so truyen vao là ms) 
0029:  MOVLW  04
002A:  MOVWF  21
002B:  MOVLW  FA
002C:  MOVWF  22
002D:  CALL   004
002E:  DECFSZ 21,F
002F:  GOTO   02B
....................       output_d(0x00); // tat ca den deu sang 
0030:  BSF    03.5
0031:  CLRF   08
0032:  BCF    03.5
0033:  CLRF   08
....................       delay_ms(1000); 
0034:  MOVLW  04
0035:  MOVWF  21
0036:  MOVLW  FA
0037:  MOVWF  22
0038:  CALL   004
0039:  DECFSZ 21,F
003A:  GOTO   036
....................       output_d(0x55); // den led tuong ung voi bit D1, D3, D5, D7 sáng 
003B:  BSF    03.5
003C:  CLRF   08
003D:  MOVLW  55
003E:  BCF    03.5
003F:  MOVWF  08
....................       delay_ms(1000); 
0040:  MOVLW  04
0041:  MOVWF  21
0042:  MOVLW  FA
0043:  MOVWF  22
0044:  CALL   004
0045:  DECFSZ 21,F
0046:  GOTO   042
....................       output_d(0xFF); // tat ca den deu tat 
0047:  BSF    03.5
0048:  CLRF   08
0049:  MOVLW  FF
004A:  BCF    03.5
004B:  MOVWF  08
....................       delay_ms(1000); 
004C:  MOVLW  04
004D:  MOVWF  21
004E:  MOVLW  FA
004F:  MOVWF  22
0050:  CALL   004
0051:  DECFSZ 21,F
0052:  GOTO   04E
0053:  BSF    03.5
0054:  GOTO   025
....................    } 
....................  
.................... } 
0055:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
